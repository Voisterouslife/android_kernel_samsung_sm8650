# 工作流名称：更新 KernelSU 源码
name: Update KernelSU Sources

# 工作流的触发条件
on:
  # 允许你手动在 Actions 页面点击 "Run workflow" 来触发
  workflow_dispatch:
    # 定义手动触发时的输入参数
    inputs:
      branch:
        description: '要更新并推送到的分支名'
        required: true
        default: 'sukisuultra'
      kernelsu_type:
        description: '选择要安装的 KernelSU 版本'
        required: true
        # 定义一个下拉选择框
        type: choice
        options:
          - sukisuultra
          - mksu
          - ksu

jobs:
  update-sources:
    # 任务名称
    name: Run Setup and Push Changes
    # 指定运行环境
    runs-on: ubuntu-latest

    # !! 关键修复：为这个任务授予写入代码的权限 !!
    permissions:
      contents: write

    steps:
      # 第一步：检出你的仓库代码
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # 检出你手动指定的分支
          ref: ${{ github.event.inputs.branch }}
          # GITHUB_TOKEN 是由 GitHub 自动提供的，现在它拥有了我们上面授予的写入权限
          token: ${{ secrets.GITHUB_TOKEN }}

      # 第二步：根据你的选择，运行对应的 KernelSU 安装脚本
      - name: Setup KernelSU
        run: |
          # 获取你在下拉框中选择的值
          KSU_TYPE="${{ github.event.inputs.kernelsu_type }}"
          echo "选择的 KernelSU 类型是: $KSU_TYPE"

          if [[ "$KSU_TYPE" == "sukisuultra" ]]; then
            echo "正在运行 SukiSU-Ultra 的 setup.sh..."
            curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
          elif [[ "$KSU_TYPE" == "mksu" ]]; then
            echo "正在运行 mksu 的 setup.sh..."
            curl -LSs "https://raw.githubusercontent.com/5ec1cff/KernelSU/main/kernel/setup.sh" | bash -
          elif [[ "$KSU_TYPE" == "ksu" ]]; then
            echo "正在运行官方 ksu 的 setup.sh..."
            curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -
          fi
          
          echo "KernelSU setup.sh 运行完毕。"

      # 第三步：提交并推送文件变动
      - name: Commit and Push changes
        run: |
          # 设置 Git 的用户名和邮箱，以便进行提交
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # 检查是否有文件变动
          # "git status --porcelain" 会在有变动时输出内容，无变动时为空
          if [[ -n $(git status --porcelain) ]]; then
            echo "检测到文件变动，正在提交并推送..."
            # 添加所有变动的文件 (除了 .gitignore 中忽略的)
            git add .
            # 创建一个提交，并附上清晰的说明
            git commit -m "ci: 更新 KernelSU (${{ github.event.inputs.kernelsu_type }}) 的相关源码"
            # 将提交推送到你指定的分支
            git push
            echo "推送成功！"
          else
            echo "没有检测到任何文件变动，无需提交。"
          fi


